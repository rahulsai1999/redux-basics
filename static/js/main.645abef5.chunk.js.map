{"version":3,"sources":["features/todo/todoSlice.js","features/todo/TabComp.js","features/todo/Todo.js","App.js","app/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todos","reducers","addTodo","state","action","id","length","push","text","payload","completed","removeTodo","index","splice","toggleTodo","x","findIndex","obj","actions","selectTodo","todo","selectTodoComp","filter","item","selectTodoLeft","TabAll","props","useSelector","dispatch","useDispatch","size","bordered","dataSource","renderItem","Item","checked","style","textDecorationLine","onChange","TabToComp","TabLeft","Todo","useState","setText","span","placeholder","value","e","target","type","onClick","defaultActiveKey","tabPosition","TabPane","tab","key","App","className","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"2UAEaA,EAAYC,YAAY,CACnCC,KAAM,OACNC,aAAc,CACZC,MAAO,IAMTC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACf,IAAIC,EAAKF,EAAMH,MAAMM,OACrBH,EAAMH,MAAMO,KAAK,CAAEF,KAAMA,EAAIG,KAAMJ,EAAOK,QAASC,WAAW,KAEhEC,WAAY,SAACR,EAAOC,GAClB,IAAMQ,EAAQR,EAAOK,QAAU,EAC/BN,EAAMH,MAAMa,OAAOD,EAAO,IAE5BE,WAAY,SAACX,EAAOC,GAClB,IAAMQ,EAAQR,EAAOK,QACjBM,EAAIZ,EAAMH,MAAMgB,WAAU,SAACC,GAAD,OAASA,EAAIZ,KAAOO,KAClDT,EAAMH,MAAMe,GAAGL,WAAaP,EAAMH,MAAMe,GAAGL,c,EAKEd,EAAUsB,QAA9ChB,E,EAAAA,QAAqBY,G,EAAZH,W,EAAYG,YAMvBK,EAAa,SAAChB,GAAD,OAAWA,EAAMiB,KAAKpB,OACnCqB,EAAiB,SAAClB,GAAD,OAC5BA,EAAMiB,KAAKpB,MAAMsB,QAAO,SAACC,GAAD,OAA6B,IAAnBA,EAAKb,cAC5Bc,EAAiB,SAACrB,GAAD,OAC5BA,EAAMiB,KAAKpB,MAAMsB,QAAO,SAACC,GAAD,OAA6B,IAAnBA,EAAKb,cAE1Bd,IAAf,Q,kBC7BM6B,EAAS,SAACC,GACd,IAAM1B,EAAQ2B,YAAYR,GACpBS,EAAWC,cACjB,OACE,kBAAC,IAAD,CACEC,KAAK,QACLC,UAAQ,EACRC,WAAYhC,EACZiC,WAAY,SAACV,GAAD,OACV,kBAAC,IAAKW,KAAN,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAASZ,EAAKb,UACd0B,MACEb,EAAKb,UACD,CAAE2B,mBAAoB,gBACtB,CAAEA,mBAAoB,QAE5BC,SAAU,kBAAMV,EAASd,EAAWS,EAAKlB,OAExCkB,EAAKf,YAQd+B,EAAY,SAACb,GACjB,IAAM1B,EAAQ2B,YAAYN,GACpBO,EAAWC,cACjB,OACE,kBAAC,IAAD,CACEC,KAAK,QACLC,UAAQ,EACRC,WAAYhC,EACZiC,WAAY,SAACV,GAAD,OACV,kBAAC,IAAKW,KAAN,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAASZ,EAAKb,UACd0B,MACEb,EAAKb,UACD,CAAE2B,mBAAoB,gBACtB,CAAEA,mBAAoB,QAE5BC,SAAU,kBAAMV,EAASd,EAAWS,EAAKlB,OAExCkB,EAAKf,YAQdgC,EAAU,SAACd,GACf,IAAM1B,EAAQ2B,YAAYH,GACpBI,EAAWC,cACjB,OACE,kBAAC,IAAD,CACEC,KAAK,QACLC,UAAQ,EACRC,WAAYhC,EACZiC,WAAY,SAACV,GAAD,OACV,kBAAC,IAAKW,KAAN,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAASZ,EAAKb,UACd0B,MACEb,EAAKb,UACD,CAAE2B,mBAAoB,gBACtB,CAAEA,mBAAoB,QAE5BC,SAAU,kBAAMV,EAASd,EAAWS,EAAKlB,OAExCkB,EAAKf,YChCLiC,EAhDF,SAACf,GACZ,IAAME,EAAWC,cADK,EAEEa,mBAAS,IAFX,mBAEflC,EAFe,KAETmC,EAFS,KAItB,OACE,6BACE,wCACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,YAAY,aACZC,MAAOtC,EACP8B,SAAU,SAACS,GAAD,OAAOJ,EAAQI,EAAEC,OAAOF,UAEpC,kBAAC,IAAD,CACEG,KAAK,UACLnB,KAAK,SACLoB,QAAS,WACPtB,EAAS1B,EAAQM,IACjBmC,EAAQ,MALZ,eAaN,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,KAAM,IACT,kBAAC,IAAD,CAAMO,iBAAiB,IAAIC,YAAY,OACrC,kBAAC,IAAKC,QAAN,CAAcC,IAAI,MAAMC,IAAI,OAC1B,kBAAC,EAAD,OAEF,kBAAC,IAAKF,QAAN,CAAcC,IAAI,YAAYC,IAAI,aAChC,kBAAC,EAAD,OAEF,kBAAC,IAAKF,QAAN,CAAcC,IAAI,cAAcC,IAAI,eAClC,kBAAC,EAAD,YChCCC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,SCLOC,cAAe,CAC5BC,QAAS,CACPvC,KAAMwC,KCEVC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOA,GACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.645abef5.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const todoSlice = createSlice({\n  name: \"todo\",\n  initialState: {\n    todos: [],\n  },\n  // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n  // doesn't actually mutate the state because it uses the Immer library,\n  // which detects changes to a \"draft state\" and produces a brand new\n  // immutable state based off those changes\n  reducers: {\n    addTodo: (state, action) => {\n      let id = state.todos.length;\n      state.todos.push({ id: ++id, text: action.payload, completed: false });\n    },\n    removeTodo: (state, action) => {\n      const index = action.payload - 1;\n      state.todos.splice(index, 1);\n    },\n    toggleTodo: (state, action) => {\n      const index = action.payload;\n      let x = state.todos.findIndex((obj) => obj.id === index);\n      state.todos[x].completed = !state.todos[x].completed;\n    },\n  },\n});\n\nexport const { addTodo, removeTodo, toggleTodo } = todoSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n// state.<name of action/slice>.<name of variable given in initial state>\nexport const selectTodo = (state) => state.todo.todos;\nexport const selectTodoComp = (state) =>\n  state.todo.todos.filter((item) => item.completed === true);\nexport const selectTodoLeft = (state) =>\n  state.todo.todos.filter((item) => item.completed === false);\n\nexport default todoSlice.reducer;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Checkbox, Space, List } from \"antd\";\n\nimport {\n  toggleTodo,\n  selectTodo,\n  selectTodoComp,\n  selectTodoLeft,\n} from \"./todoSlice\";\n\nconst TabAll = (props) => {\n  const todos = useSelector(selectTodo);\n  const dispatch = useDispatch();\n  return (\n    <List\n      size=\"large\"\n      bordered\n      dataSource={todos}\n      renderItem={(item) => (\n        <List.Item>\n          <Space>\n            <Checkbox\n              checked={item.completed}\n              style={\n                item.completed\n                  ? { textDecorationLine: \"line-through\" }\n                  : { textDecorationLine: \"none\" }\n              }\n              onChange={() => dispatch(toggleTodo(item.id))}\n            >\n              {item.text}\n            </Checkbox>\n          </Space>\n        </List.Item>\n      )}\n    />\n  );\n};\nconst TabToComp = (props) => {\n  const todos = useSelector(selectTodoComp);\n  const dispatch = useDispatch();\n  return (\n    <List\n      size=\"large\"\n      bordered\n      dataSource={todos}\n      renderItem={(item) => (\n        <List.Item>\n          <Space>\n            <Checkbox\n              checked={item.completed}\n              style={\n                item.completed\n                  ? { textDecorationLine: \"line-through\" }\n                  : { textDecorationLine: \"none\" }\n              }\n              onChange={() => dispatch(toggleTodo(item.id))}\n            >\n              {item.text}\n            </Checkbox>\n          </Space>\n        </List.Item>\n      )}\n    />\n  );\n};\nconst TabLeft = (props) => {\n  const todos = useSelector(selectTodoLeft);\n  const dispatch = useDispatch();\n  return (\n    <List\n      size=\"large\"\n      bordered\n      dataSource={todos}\n      renderItem={(item) => (\n        <List.Item>\n          <Space>\n            <Checkbox\n              checked={item.completed}\n              style={\n                item.completed\n                  ? { textDecorationLine: \"line-through\" }\n                  : { textDecorationLine: \"none\" }\n              }\n              onChange={() => dispatch(toggleTodo(item.id))}\n            >\n              {item.text}\n            </Checkbox>\n          </Space>\n        </List.Item>\n      )}\n    />\n  );\n};\n\nexport { TabAll, TabToComp, TabLeft };\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Input, Button, Row, Col, Space, Tabs } from \"antd\";\n\nimport { addTodo } from \"./todoSlice\";\nimport { TabAll, TabToComp, TabLeft } from \"./TabComp\";\n\nconst Todo = (props) => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState(\"\");\n\n  return (\n    <div>\n      <h2>Todo App</h2>\n      <Row>\n        <Col span={24}>\n          <Space>\n            <Input\n              placeholder=\"Enter Todo\"\n              value={text}\n              onChange={(e) => setText(e.target.value)}\n            />\n            <Button\n              type=\"primary\"\n              size=\"middle\"\n              onClick={() => {\n                dispatch(addTodo(text));\n                setText(\"\");\n              }}\n            >\n              Add Todo\n            </Button>\n          </Space>\n        </Col>\n      </Row>\n      <br />\n      <Row>\n        <Col span={24}>\n          <Tabs defaultActiveKey=\"1\" tabPosition=\"top\">\n            <Tabs.TabPane tab=\"All\" key=\"All\">\n              <TabAll />\n            </Tabs.TabPane>\n            <Tabs.TabPane tab=\"Completed\" key=\"Completed\">\n              <TabToComp />\n            </Tabs.TabPane>\n            <Tabs.TabPane tab=\"To Complete\" key=\"To Complete\">\n              <TabLeft />\n            </Tabs.TabPane>\n          </Tabs>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\nimport \"./App.css\";\nimport Todo from \"./features/todo/Todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <Todo />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport todoReducer from \"../features/todo/todoSlice\";\n\nexport default configureStore({\n  reducer: {\n    todo: todoReducer,\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./app/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}