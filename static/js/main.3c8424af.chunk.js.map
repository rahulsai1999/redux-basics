{"version":3,"sources":["features/todo/todoSlice.js","features/todo/tabs.js","features/todo/Todo.js","App.js","app/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","todos","reducers","addTodo","state","action","id","length","push","text","payload","completed","removeTodo","index","splice","toggleTodo","x","findIndex","obj","actions","selectTodo","todo","selectTodoComp","filter","item","selectTodoLeft","TabAll","props","useSelector","dispatch","useDispatch","size","bordered","dataSource","renderItem","Item","checked","style","textDecorationLine","onChange","TabToComp","TabLeft","Todo","useState","setText","span","placeholder","value","e","target","type","onClick","defaultActiveKey","tabPosition","TabPane","tab","key","App","className","configureStore","reducer","todoReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.3c8424af.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const todoSlice = createSlice({\r\n  name: \"todo\",\r\n  initialState: {\r\n    todos: [],\r\n  },\r\n  // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n  // doesn't actually mutate the state because it uses the Immer library,\r\n  // which detects changes to a \"draft state\" and produces a brand new\r\n  // immutable state based off those changes\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      let id = state.todos.length;\r\n      state.todos.push({ id: ++id, text: action.payload, completed: false });\r\n    },\r\n    removeTodo: (state, action) => {\r\n      const index = action.payload - 1;\r\n      state.todos.splice(index, 1);\r\n    },\r\n    toggleTodo: (state, action) => {\r\n      const index = action.payload;\r\n      let x = state.todos.findIndex((obj) => obj.id === index);\r\n      state.todos[x].completed = !state.todos[x].completed;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addTodo, removeTodo, toggleTodo } = todoSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\n// state.<name of action/slice>.<name of variable given in initial state>\r\nexport const selectTodo = (state) => state.todo.todos;\r\nexport const selectTodoComp = (state) =>\r\n  state.todo.todos.filter((item) => item.completed === true);\r\nexport const selectTodoLeft = (state) =>\r\n  state.todo.todos.filter((item) => item.completed === false);\r\n\r\nexport default todoSlice.reducer;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Checkbox, Space, List } from \"antd\";\r\n\r\nimport {\r\n  toggleTodo,\r\n  selectTodo,\r\n  selectTodoComp,\r\n  selectTodoLeft,\r\n} from \"./todoSlice\";\r\n\r\nconst TabAll = (props) => {\r\n  const todos = useSelector(selectTodo);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List\r\n      size=\"large\"\r\n      bordered\r\n      dataSource={todos}\r\n      renderItem={(item) => (\r\n        <List.Item>\r\n          <Space>\r\n            <Checkbox\r\n              checked={item.completed}\r\n              style={\r\n                item.completed\r\n                  ? { textDecorationLine: \"line-through\" }\r\n                  : { textDecorationLine: \"none\" }\r\n              }\r\n              onChange={() => dispatch(toggleTodo(item.id))}\r\n            >\r\n              {item.text}\r\n            </Checkbox>\r\n          </Space>\r\n        </List.Item>\r\n      )}\r\n    />\r\n  );\r\n};\r\nconst TabToComp = (props) => {\r\n  const todos = useSelector(selectTodoComp);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List\r\n      size=\"large\"\r\n      bordered\r\n      dataSource={todos}\r\n      renderItem={(item) => (\r\n        <List.Item>\r\n          <Space>\r\n            <Checkbox\r\n              checked={item.completed}\r\n              style={\r\n                item.completed\r\n                  ? { textDecorationLine: \"line-through\" }\r\n                  : { textDecorationLine: \"none\" }\r\n              }\r\n              onChange={() => dispatch(toggleTodo(item.id))}\r\n            >\r\n              {item.text}\r\n            </Checkbox>\r\n          </Space>\r\n        </List.Item>\r\n      )}\r\n    />\r\n  );\r\n};\r\nconst TabLeft = (props) => {\r\n  const todos = useSelector(selectTodoLeft);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <List\r\n      size=\"large\"\r\n      bordered\r\n      dataSource={todos}\r\n      renderItem={(item) => (\r\n        <List.Item>\r\n          <Space>\r\n            <Checkbox\r\n              checked={item.completed}\r\n              style={\r\n                item.completed\r\n                  ? { textDecorationLine: \"line-through\" }\r\n                  : { textDecorationLine: \"none\" }\r\n              }\r\n              onChange={() => dispatch(toggleTodo(item.id))}\r\n            >\r\n              {item.text}\r\n            </Checkbox>\r\n          </Space>\r\n        </List.Item>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport { TabAll, TabToComp, TabLeft };\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Input, Button, Row, Col, Space, Tabs } from \"antd\";\r\n\r\nimport { addTodo } from \"./todoSlice\";\r\nimport { TabAll, TabToComp, TabLeft } from \"./tabs\";\r\n\r\nconst Todo = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState(\"\");\r\n\r\n  return (\r\n    <div>\r\n      <h2>Todo App</h2>\r\n      <Row>\r\n        <Col span={24}>\r\n          <Space>\r\n            <Input\r\n              placeholder=\"Enter Todo\"\r\n              value={text}\r\n              onChange={(e) => setText(e.target.value)}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              size=\"middle\"\r\n              onClick={() => {\r\n                dispatch(addTodo(text));\r\n                setText(\"\");\r\n              }}\r\n            >\r\n              Add Todo\r\n            </Button>\r\n          </Space>\r\n        </Col>\r\n      </Row>\r\n      <br />\r\n      <Row>\r\n        <Col span={24}>\r\n          <Tabs defaultActiveKey=\"1\" tabPosition=\"top\">\r\n            <Tabs.TabPane tab=\"All\" key=\"All\">\r\n              <TabAll />\r\n            </Tabs.TabPane>\r\n            <Tabs.TabPane tab=\"Completed\" key=\"Completed\">\r\n              <TabToComp />\r\n            </Tabs.TabPane>\r\n            <Tabs.TabPane tab=\"To Complete\" key=\"To Complete\">\r\n              <TabLeft />\r\n            </Tabs.TabPane>\r\n          </Tabs>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Todo from \"./features/todo/Todo\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <Todo />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todoReducer from \"../features/todo/todoSlice\";\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todo: todoReducer,\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}